?runif
knitr::opts_chunk$set(echo = TRUE)
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(theta[1])))
beta <- 2
N <- 10^5
n <- 15
theta1 <- theta2 <- theta3 <- numeric(N)
for(j in 1:N) {
draw <- runif(n = n, min = 0, max = beta)
theta1[j] <- min(draw) * (n + 1) / n
theta2[j] <- max(draw) * (n + 1) / n
theta3[j] <- max(draw)
}
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(theta[1])))
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(theta[1]), expression(theta[2]), expression(theta[3])))
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(hat(theta[1])), expression(hat(theta[2])), expression(hat(theta[3]))))
beta <- 2
N <- 10^5
n <- 15
theta1 <- theta2 <- theta3 <- numeric(N)
for(j in 1:N) {
draw <- runif(n = n, min = 0, max = beta)
theta1[j] <- min(draw) * (n + 1)
theta2[j] <- max(draw) * (n + 1) / n
theta3[j] <- max(draw)
}
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(hat(theta[1])), expression(hat(theta[2])), expression(hat(theta[3]))))
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(hat(theta[1])), expression(hat(theta[2])), expression(hat(theta[3]))),
ylim = c(0, 3))
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(hat(theta[1])), expression(hat(theta[2])), expression(hat(theta[3]))),
ylim = c(0, 4))
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(hat(theta[1])), expression(hat(theta[2])), expression(hat(theta[3]))),
ylim = c(0, 4))
abline(h = 2, col = "red", lty = 2)
boxplot(theta1, theta2, theta3, xlab = "Estimators",
names = c(expression(hat(theta[1])), expression(hat(theta[2])), expression(hat(theta[3]))),
ylim = c(0, 4))
abline(h = beta, col = "red", lty = 2)
knitr::opts_chunk$set(echo = TRUE)
dat <- data.frame(
push0 <- c(38.14, 38.20, 38.31, 38.14, 38.29, 38.17, 38.20)
push1 <- c(38.28, 38.17, 38.08, 38.25, 38.18, 38.03, 37.95, 38.26, 38.30, 38.21)
dat <- data.frame(
push0 <- c(38.14, 38.20, 38.31, 38.14, 38.29, 38.17, 38.20),
push1 <- c(38.28, 38.17, 38.08, 38.25, 38.18, 38.03, 37.95, 38.26, 38.30, 38.21),
push2 <- c(38.17, 38.13, 38.16, 38.30, 38.34, 38.34, 38.17, 38.18, 38.09, 38.06),
push3 <- c(38.14, 38.30, 38.21, 38.04, 38.37))
dat <- data.frame(
push0 <- c(38.14, 38.20, 38.31, 38.14, 38.29, 38.17, 38.20,    NA,    NA,    NA),
push1 <- c(38.28, 38.17, 38.08, 38.25, 38.18, 38.03, 37.95, 38.26, 38.30, 38.21),
push2 <- c(38.17, 38.13, 38.16, 38.30, 38.34, 38.34, 38.17, 38.18, 38.09, 38.06),
push3 <- c(38.14, 38.30, 38.21, 38.04, 38.37,    NA,    NA,    NA,    NA,    NA))
dat
dat <- data.frame(
push0 = c(38.14, 38.20, 38.31, 38.14, 38.29, 38.17, 38.20,    NA,    NA,    NA),
push1 = c(38.28, 38.17, 38.08, 38.25, 38.18, 38.03, 37.95, 38.26, 38.30, 38.21),
push2 = c(38.17, 38.13, 38.16, 38.30, 38.34, 38.34, 38.17, 38.18, 38.09, 38.06),
push3 = c(38.14, 38.30, 38.21, 38.04, 38.37,    NA,    NA,    NA,    NA,    NA))
dat
plot(rep(1, 10), dat$push0, xlab = "Pushes of the Button",
ylab = "Time until Sign Appears", xlim = c(0, 5))
points(rep(2, 10), dat$push1)
points(rep(3, 10), dat$push2)
points(rep(4, 10), dat$push3)
plot(rep(1, 10), dat$push0, xlab = "Pushes of the Button",
ylab = "Time until Sign Appears", xlim = c(0.5, 4.5))
points(rep(2, 10), dat$push1)
points(rep(3, 10), dat$push2)
points(rep(4, 10), dat$push3)
boxplot(dat)
boxplot(dat, names = c(1, 2, 3, 4))
boxplot(dat, names = c(1, 2, 3, 4), ylab = "Time until Sign Appears",
xlab = "Pushes of the Button")
anova_dat <- data.frame(Pushes = as.factor(rep(1:4, each = 10)),
Wait_Times = c(dat$push0, dat$push1, dat$push2, dat$push3))
anova_dat <- anova_dat[!is.na(anova_dat$Wait_Times), ]
mod <- aov(Wait_Times ~ Pushes, data = anova_dat)
summary(mod)
apply(anova_dat, MAR = 1, FUN = mean)
apply(anova_dat, MAR = 1, FUN = var)
apply(dat, MAR = 1, FUN = mean)
apply(dat, MAR = 1, FUN = var)
apply(dat, MAR = 2, FUN = mean, na.rm = TRUE)
apply(dat, MAR = 2, FUN = var,  na.rm = TRUE)
summary.lm(mod)
summary.lm(mod)$coefficients[, 1:2]
coefs <- summary.lm(mod)$coefficients[, 1:2]
means <- c(coefs[1, 1], coefs[1, 1] + coefs[2:4, 1])
means
library("gmodels")
install.packages("gmodels")
library("gmodels")
fit.contrast(mod, "Pushes", c(1, -1/3, -1/3, -1/3))
t <- fit.contrast(mod, "Pushes", c(1, -1/3, -1/3, -1/3))
str(t)
t[[2]]
t[[1]]
t[1]
library("gmodels")
fit.contrast(mod, "Pushes", c(1, -1/3, -1/3, -1/3))
dat7 <- data.frame(bp_025 = c(11.4, 11.0, 11.3, 9.5),
bp_050 = c(27.8, 29.2, 26.8, 26.0),
bp_075 = c(47.6, 47.0, 47.3, 45.5),
bp_100 = c(61.6, 62.4, 63.0, 63.9))
dat7
anova_dat7 <- data.frame(Baking_Powder = rep(c("bp_025", "bp_050", "bp_075", "bp_100"), each = 4),
Rise_Height = unlist(dat7))
anova_dat7
summary(mod)
mod7 <- aov(Rise_Height ~ Baking_Power, data = anova_dat7)
summary(mod)
anova_dat7
boxplot(dat7)
str(anova_dat7)
anova_dat7 <- data.frame(Baking_Powder = rep(c("bp_025", "bp_050", "bp_075", "bp_100"), each = 4),
Rise_Height = unlist(dat7))
anova_dat7
mod7 <- aov(Rise_Height ~ Baking_Power, data = anova_dat7)
mod7 <- aov(Rise_Height ~ Baking_Powder, data = anova_dat7)
summary(mod7)
boxplot(dat7, names = "0.25 tsp", "0.50 tsp", "0.75 tsp", "1.00 tsp",
xlab = "Amount of Baking Powder",
ylab = "Rise Height")
boxplot(dat7, names = c("0.25 tsp", "0.50 tsp", "0.75 tsp", "1.00 tsp"),
xlab = "Amount of Baking Powder",
ylab = "Rise Height")
data(bread)
library("daewr")
install.packages("daewr")
install.packages("partitions")
install.packages("gmp")
install.packages("partitions")
install.packages("daewr")
library("daewr")
data(bread)
bread
contrasts(mod7) <- contr.poly(2)
contrasts(anova_dat7$Rise_Height) <- contr.poly(2)
contrasts(anova_dat7$Rise_Height)
contrasts(anova_dat7$Baking_Powder) <- contr.poly(2)
contrasts(anova_dat7$Baking_Powder)
contrasts(anova_dat7$Baking_Powder) <- contr.poly(2)
contrasts(anova_dat7$Baking_Powder) <- contr.poly(4)
contrasts(anova_dat7$Baking_Powder)
mod7b <- aov( Rise_Height ~ Baking_Powder, data = anova_dat7)
summary.lm(mod7b)
?contr.poly
1.06^2
qqnorm(mod7b$residuals)
qqnorm(mod7b$residuals)
qqline()
qqnorm(mod7b$residuals)
qqline(mod7b$residuals)
qqnorm(mod7b$residuals)
qqline(mod7b$residuals)
plot(x = mod7b$fitted.values, y = mod7b$residuals)
qqnorm(mod7b$residuals)
qqline(mod7b$residuals)
plot(x = mod7b$fitted.values, y = mod7b$residuals)
abline(h = 0)
knitr::opts_chunk$set(echo = TRUE)
p <- seq(0.01, 0.99, 0.01)
n <- c(10, 25, 50, 100)
MSE1 <- MSE2 <- matrix(data = 0, nrow = 98, ncol = 4)
for(j in 1:length(p)) {
MSE1[j, 1:4] <- (p[j]*(1-p[j])) / n
MSE2[j, 1:4] <- n * (p[j]*(1-p[j])) / (n+2)^2 + ((1-2*p[j])/(n+2))^2
}
p <- seq(0.01, 0.99, 0.01)
n <- c(10, 25, 50, 100)
MSE1 <- MSE2 <- matrix(data = 0, nrow = 99, ncol = 4)
for(j in 1:length(p)) {
MSE1[j, 1:4] <- (p[j]*(1-p[j])) / n
MSE2[j, 1:4] <- n * (p[j]*(1-p[j])) / (n+2)^2 + ((1-2*p[j])/(n+2))^2
}
plot(p, MSE1[, 1], type = "l")
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
plot(p, MSE2[, 1], type = "l")
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE")
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, n)
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE")
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = n)
plot(p, MSE2[, 1], type = "l")
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE")
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l")
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(hat(p)[1]))
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l")
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = paste("MSEs for ", expression(hat(p)[1])))
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l")
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[1])))
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l")
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[1])))
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[1])))
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[1])))
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[2])))
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[1])))
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[2])))
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
par(mfrow = c(1, 2))
plot(p, MSE1[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[1])))
for(j in 2:4) {
lines(p, MSE1[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE2[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = expression(paste("MSEs for ", hat(p)[2])))
for(j in 2:4) {
lines(p, MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE1[, 1] - MSE2[, 1], type = "l", ylim = c(0, 0.025),
xlab = "p", ylab = "MSE", main = paste("Difference of MSEs"))
for(j in 2:4) {
lines(p, MSE1[, j] - MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE1[, 1] - MSE2[, 1], type = "l", ylim = c(-0.025, 0.025),
xlab = "p", ylab = "MSE", main = paste("Difference of MSEs"))
for(j in 2:4) {
lines(p, MSE1[, j] - MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE1[, 1] - MSE2[, 1], type = "l", ylim = c(-0.01, 0.01),
xlab = "p", ylab = "MSE", main = paste("Difference of MSEs"))
for(j in 2:4) {
lines(p, MSE1[, j] - MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE1[, 1] - MSE2[, 1], type = "l", ylim = c(-0.01, 0.01),
xlab = "p", ylab = "MSE", main = paste("Difference of MSEs"))
abline(h = 0)
for(j in 2:4) {
lines(p, MSE1[, j] - MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE1[, 1] - MSE2[, 1], type = "l", ylim = c(-0.06, 0.06),
xlab = "p", ylab = "MSE", main = paste("Difference of MSEs"))
abline(h = 0)
for(j in 2:4) {
lines(p, MSE1[, j] - MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
plot(p, MSE1[, 1] - MSE2[, 1], type = "l", ylim = c(-0.006, 0.006),
xlab = "p", ylab = "MSE", main = paste("Difference of MSEs"))
abline(h = 0)
for(j in 2:4) {
lines(p, MSE1[, j] - MSE2[, j], col = j)
}
legend(x = "topright", fill = 1:4, legend = paste("n = ", n))
N <- 10^5
n <- 15
beta <- 5
sim <- matrix(data = 0, nrow = N, ncol = 3)
for(j in 1:N) {
dat <- runif(n, 0, beta)
sim[j, 1] <- 2 * mean(dat)
sim[j, 2] <- (n+1)/n * max(dat)
sim[j, 3] <- max(dat)
}
results <- matrix(data = 0, nrow = 3, ncol = 3)
for(j in 1:3) {
results[j, ] <- c(mean(sim[, j]) - beta,
var(sim[, j]),
var(sim[, j]) + (mean(sim[, j]) - beta)^2)
}
rownames(results) <- c("Bias", "Variance", "MSE")
colnames(results) <- c("theta1", "theta2", "theta3")
results
boxplot(sim, names = c("theta1", "theta2", "theta3"))
boxplot(sim, names = c("theta1", "theta2", "theta3"))
abline(h = 5, col = "red", lty = 2)
N <- 10^5
n <- 15
beta <- 5
sim <- matrix(data = 0, nrow = N, ncol = 3)
for(j in 1:N) {
dat <- runif(n, 0, beta)
sim[j, 1] <- 2 * mean(dat)
sim[j, 2] <- (n+1)/n * max(dat)
sim[j, 3] <- max(dat)
}
results <- matrix(data = 0, nrow = 3, ncol = 3)
for(j in 1:3) {
results[, j] <- c(mean(sim[, j]) - beta,
var(sim[, j]),
var(sim[, j]) + (mean(sim[, j]) - beta)^2)
}
rownames(results) <- c("Bias", "Variance", "MSE")
colnames(results) <- c("theta1", "theta2", "theta3")
results
N <- 10^5
n <- 15
beta <- 5
sim <- matrix(data = 0, nrow = N, ncol = 3)
for(j in 1:N) {
dat <- runif(n, 0, beta)
sim[j, 1] <- 2 * mean(dat)
sim[j, 2] <- (n+1)/n * max(dat)
sim[j, 3] <- max(dat)
}
results <- matrix(data = 0, nrow = 3, ncol = 3)
for(j in 1:3) {
results[, j] <- c(mean(sim[, j]) - beta,
var(sim[, j]),
var(sim[, j]) + (mean(sim[, j]) - beta)^2)
}
results <- round(results, 3)
rownames(results) <- c("Bias", "Variance", "MSE")
colnames(results) <- c("theta1", "theta2", "theta3")
results
knitr::opts_chunk$set(echo = TRUE)
library("resampledata")
data(Olympics2012)
data(Olympics2012)
cor(Olympics2012$)
cor(Olympics2012$Height, Olympics2012$Weight)
library("resampledata")
data(Olympics2012)
corHW <- cor(Olympics2012$Height, Olympics2012$Weight)
plot(Height ~ Weight, data = Olympics2012)
plot(Height ~ Weight, data = Olympics2012,
ylab = "Height (Inches)", xlab = "Weight (lbs)")
corHW2 <- cor(Olympics2012$Height, Olympics2012$Weight)
Olympics2012 <- Olympics2012[Olympics2012$Weight < 225, ]
corHW2 <- cor(Olympics2012$Height, Olympics2012$Weight)
data(Quetzal)
plot(Quetzal$Nest ~ Quetzal$Snag)
plot(Nest ~ Snag, data = Quetzal)
plot(Nest ~ Snag, data = Quetzal,
xlab = "Snag Height", ylab = "Nest Height")
mod <- lm(Nest ~ Snag, data = Quetzal)
summary(mod)
predict(mod, newdata = data.frame(Snag = 8))
y_fit <- -0.22729 + 0.79267 * 8
y_fit_auto <- predict(mod, newdata = data.frame(Snag = 8))
mod <- lm(Nest ~ Snag, data = Quetzal)
summary(mod)
mod <- lm(Nest ~ Snag, data = Quetzal)
summary(mod)
str(mod)
summary.lm(mod)
str(summary.lm(mod))
summary.lm(mod)$r.squared
install.packages("xaringan")
install.packages("xaringan")
update.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("kableExtra")
srate <- 1000                         # Sampling Rate
pt <- 512                             # Number of data
range <- (pt/2)
t <- seq(0,0.511,1/srate)                 # Why does the endpoint of time has to be 0.6
f <- srate * seq(0,(pt/2 - 1))/pt         # 0.511 might be a better choice since we only have 512 points
x <- sin(2*pi*50*t)+sin(2*pi*120*t)
y <- x+rnorm(length(t))
plot(t,y,type = "l")                  # Plot of the signal
lines(t, x, col = "red")              # Plot of the original signal w/o noise
Y <- fft(y)
Pyy <- Y * Conj(Y)/pt
plot(f, Pyy[1:range], type = "l", xlabel = "Power", ylabel = "Frequency")
abline(v = c(50, 120), col = "red")
plot(0:511, Pyy, type = "l")
seq(from = 0, to = 0.1, length.out = 513)
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(Gender = c(rep("M", m), rep("F", f)),
Antibiotics = c(rep(1, m_a), rep(0, m - m_a),
rep(1, f_a), rep(0, f - f_a)),
Overweight_9mon = c(rep(1, 90), rep(0, 168),
rep(1, 19), rep(0, 69),
rep(1, 54), rep(0, 126),
rep(1, 18), rep(0, 72)))
n <- 616
f <- 270
m <- 346
f_a <- 180
m_a <- 258
f_o_9 <- 73     # 2 no : 3 yes
m_o_9 <- 108    # 2 no : 3.5 yes
f_o_12 <- 55    # 2 no : 2.5 yes
m_o_12 <- 90    # 1.5 no : 3.5 yes
df <- data.frame(Gender = c(rep("M", m), rep("F", f)),
Antibiotics = c(rep(1, m_a), rep(0, m - m_a),
rep(1, f_a), rep(0, f - f_a)),
Overweight_9mon = c(rep(1, 90), rep(0, 168),
rep(1, 19), rep(0, 69),
rep(1, 54), rep(0, 126),
rep(1, 18), rep(0, 72)))
str(df)
df <- data.frame(Gender = c(rep("M", m), rep("F", f)),
Antibiotics = c(rep(1, m_a), rep(0, m - m_a),
rep(1, f_a), rep(0, f - f_a)),
Overweight_9mon = c(rep(1, 90), rep(0, 168),
rep(1, 19), rep(0, 69),
rep(1, 54), rep(0, 126),
rep(1, 18), rep(0, 72)),
stringsAsFactors = FALSE)
str(df)
df <- data.frame(Gender = c(rep("M", m), rep("F", f)),
Antibiotics = c(rep(1, m_a), rep(0, m - m_a),
rep(1, f_a), rep(0, f - f_a)),
Overweight_9mon = c(rep(1, 90), rep(0, 168),
rep(1, 19), rep(0, 69),
rep(1, 54), rep(0, 126),
rep(1, 18), rep(0, 72)),
stringsAsFactors = FALSE)
df <- df[sample(1:n), ]
str(df)
write.csv(file = "Experiment3_Physiology.csv", df, row.names = FALSE)
setwd("~/1051/Lectures/2019_MATH1051H_Lectures/Lecture22")
rmarkdown::render("Lecture22.Rmd", output_format = "powerpoint_presentation")
